const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
const Product = require('./models/Product');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
mongoose.connect('mongodb://localhost:27017/your-database-name', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ Cloudinary
async function uploadImageToCloudinary(imageUrl) {
    try {
        // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ Cloudinary
        // –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL
        return imageUrl;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤
async function importProducts(jsonFilePath) {
    try {
        // –ß–∏—Ç–∞—î–º–æ JSON —Ñ–∞–π–ª
        const jsonData = fs.readFileSync(jsonFilePath, 'utf8');
        const products = JSON.parse(jsonData);

        console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É`);

        for (let i = 0; i < products.length; i++) {
            const productData = products[i];
            
            console.log(`–Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä ${i + 1}/${products.length}: ${productData.name}`);

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –Ω–∞ Cloudinary
            if (productData.photos && productData.photos.length > 0) {
                const uploadedPhotos = [];
                for (const photoUrl of productData.photos) {
                    const uploadedUrl = await uploadImageToCloudinary(photoUrl);
                    if (uploadedUrl) {
                        uploadedPhotos.push(uploadedUrl);
                    }
                }
                productData.photos = uploadedPhotos;
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –∫–æ–ª—å–æ—Ä—ñ–≤
            if (productData.colors && productData.colors.length > 0) {
                for (const color of productData.colors) {
                    if (color.photo) {
                        color.photo = await uploadImageToCloudinary(color.photo);
                    }
                }
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
            const newProduct = new Product(productData);
            await newProduct.save();

            console.log(`‚úÖ –¢–æ–≤–∞—Ä "${productData.name}" —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ`);
        }

        console.log('üéâ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —ñ–º–ø–æ—Ä—Ç—É
const jsonFilePath = process.argv[2] || 'products-backup.json';

if (!fs.existsSync(jsonFilePath)) {
    console.error(`‚ùå –§–∞–π–ª ${jsonFilePath} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    process.exit(1);
}

importProducts(jsonFilePath); 