const puppeteer = require('puppeteer');
const fs = require('fs');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É
const SITE_CONFIG = {
    category: 'vitalni', // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–∞ –≤–∞—à–æ–º—É —Å–∞–π—Ç—ñ
    subcategory: 'miromark', // –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è
    brand: 'MiroMark', // –ë—Ä–µ–Ω–¥
    material: '–õ–∞–º—ñ–Ω–æ–≤–∞–Ω–µ –î–°–ü', // –ú–∞—Ç–µ—Ä—ñ–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    type: 'simple' // –¢–∏–ø —Ç–æ–≤–∞—Ä—É
};

async function scrapeMiroMark() {
    const browser = await puppeteer.launch({ 
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    const products = [];
    
    try {
        console.log('üîç –ü–æ—á–∏–Ω–∞—é –∑–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ –∑ MiroMark...');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        await page.goto('https://miromark.shop/ua', { waitUntil: 'networkidle2' });
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        const categories = await page.evaluate(() => {
            const categoryLinks = Array.from(document.querySelectorAll('a[href*="/ua/"]'));
            return categoryLinks
                .map(link => link.href)
                .filter(href => href.includes('/ua/') && !href.includes('#') && !href.includes('mailto'))
                .filter((href, index, arr) => arr.indexOf(href) === index); // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ URL
        });
        
        console.log(`üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏`);
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        for (let i = 0; i < categories.length; i++) {
            const categoryUrl = categories[i];
            console.log(`\nüìÅ –û–±—Ä–æ–±–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ${i + 1}/${categories.length}: ${categoryUrl}`);
            
            try {
                await page.goto(categoryUrl, { waitUntil: 'networkidle2' });
                
                // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                const categoryProducts = await page.evaluate(() => {
                    const productElements = Array.from(document.querySelectorAll('.product-item, .catalog-item, [class*="product"]'));
                    
                    return productElements.map(product => {
                        // –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
                        const nameElement = product.querySelector('h1, h2, h3, .product-name, .item-name, [class*="name"]');
                        const name = nameElement ? nameElement.textContent.trim() : '';
                        
                        // –¶—ñ–Ω–∞
                        const priceElement = product.querySelector('.price, .product-price, [class*="price"]');
                        let price = null;
                        if (priceElement) {
                            const priceText = priceElement.textContent.replace(/[^\d]/g, '');
                            price = priceText ? parseInt(priceText) : null;
                        }
                        
                        // –ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞
                        const salePriceElement = product.querySelector('.sale-price, .discount-price, [class*="sale"]');
                        let salePrice = null;
                        if (salePriceElement) {
                            const saleText = salePriceElement.textContent.replace(/[^\d]/g, '');
                            salePrice = saleText ? parseInt(saleText) : null;
                        }
                        
                        // –§–æ—Ç–æ
                        const imageElement = product.querySelector('img');
                        const photo = imageElement ? imageElement.src : null;
                        
                        // –û–ø–∏—Å (—è–∫—â–æ —î)
                        const descriptionElement = product.querySelector('.description, .product-description, [class*="desc"]');
                        const description = descriptionElement ? descriptionElement.textContent.trim() : '';
                        
                        // –†–æ–∑–º—ñ—Ä–∏ (—è–∫—â–æ —î)
                        const sizeElement = product.querySelector('.size, .dimensions, [class*="size"]');
                        const size = sizeElement ? sizeElement.textContent.trim() : '';
                        
                        // –ö–æ–ª—ñ—Ä (—è–∫—â–æ —î)
                        const colorElement = product.querySelector('.color, [class*="color"]');
                        const color = colorElement ? colorElement.textContent.trim() : '';
                        
                        return {
                            name,
                            price,
                            salePrice,
                            photo,
                            description,
                            size,
                            color,
                            categoryUrl
                        };
                    }).filter(product => product.name && product.name.length > 0);
                });
                
                console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${categoryProducts.length} —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó`);
                products.push(...categoryProducts);
                
                // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                await page.waitForTimeout(1000);
                
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${categoryUrl}:`, error.message);
            }
        }
        
        console.log(`\nüéâ –ó–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤`);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É
        const convertedProducts = products.map((product, index) => {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π slug
            const slug = product.name
                .toLowerCase()
                .replace(/[^–∞-—èa-z0-9\s]/g, '')
                .replace(/\s+/g, '-')
                .substring(0, 50) + '-' + (index + 1);
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤–∏
            let material = SITE_CONFIG.material;
            if (product.name.toLowerCase().includes('–¥—É–±')) material = '–î—É–±';
            if (product.name.toLowerCase().includes('—è—Å–µ–Ω')) material = '–Ø—Å–µ–Ω';
            if (product.name.toLowerCase().includes('—Å–æ—Å–Ω–∞')) material = '–°–æ—Å–Ω–∞';
            if (product.name.toLowerCase().includes('–º–¥—Ñ')) material = '–ú–î–§';
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
            let widthCm = null, depthCm = null, heightCm = null;
            if (product.size) {
                const sizeMatch = product.size.match(/(\d+)[x—Ö](\d+)/);
                if (sizeMatch) {
                    widthCm = parseInt(sizeMatch[1]);
                    depthCm = parseInt(sizeMatch[2]);
                }
            }
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª—å–æ—Ä–∏
            const colors = [];
            if (product.color) {
                colors.push({
                    name: product.color,
                    value: '#000000', // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                    photo: null,
                    priceChange: 0
                });
            }
            
            return {
                name: product.name,
                category: SITE_CONFIG.category,
                subcategory: SITE_CONFIG.subcategory,
                price: product.price,
                salePrice: product.salePrice,
                saleEnd: null,
                brand: SITE_CONFIG.brand,
                material: material,
                filters: [],
                photos: product.photo ? [product.photo] : [],
                visible: true,
                active: true,
                slug: slug,
                type: SITE_CONFIG.type,
                sizes: [],
                colors: colors,
                groupProducts: [],
                description: product.description ? `<p>${product.description}</p>` : '<p><br></p>',
                widthCm: widthCm,
                depthCm: depthCm,
                heightCm: heightCm,
                lengthCm: null,
                popularity: 0,
                metaDescription: '',
                metaKeywords: '',
                metaTitle: ''
            };
        });
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const outputFile = 'miromark-products.json';
        fs.writeFileSync(outputFile, JSON.stringify(convertedProducts, null, 2));
        
        console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${outputFile}`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${convertedProducts.length}`);
        console.log(`   - –ó —Ü—ñ–Ω–∞–º–∏: ${convertedProducts.filter(p => p.price).length}`);
        console.log(`   - –ó –∞–∫—Ü—ñ–π–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏: ${convertedProducts.filter(p => p.salePrice).length}`);
        console.log(`   - –ó —Ñ–æ—Ç–æ: ${convertedProducts.filter(p => p.photos.length > 0).length}`);
        
        return convertedProducts;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ –¥–∞–Ω–∏—Ö:', error);
        throw error;
    } finally {
        await browser.close();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    scrapeMiroMark()
        .then(products => {
            console.log('\n‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
            console.log('üìù –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª miromark-products.json —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É');
        })
        .catch(error => {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { scrapeMiroMark }; 