const puppeteer = require('puppeteer');
const fs = require('fs');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∞–π—Ç—É
const SITE_CONFIG = {
    brand: 'MiroMark',
    category: '–õ—ñ–∂–∫–∞',
    subcategory: '',
    material: '–ú–î–§',
    type: 'simple'
};

async function scrapeSingleProduct() {
    console.log('üîç –ü–æ—à—É–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –õ—ñ–∂–∫–∞...');
    const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
    try {
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        await page.setViewport({ width: 1920, height: 1080 });
        const bedsCategoryUrl = 'https://miromark.shop/ua/lizhka';
        console.log(`üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ${bedsCategoryUrl}`);
        await page.goto(bedsCategoryUrl, { waitUntil: 'networkidle2' });
        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log('‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        const productLinks = await page.evaluate(() => {
            const links = Array.from(document.querySelectorAll('a[href*="/ua/"]'));
            return links
                .map(link => link.href)
                .filter((href, idx, arr) =>
                    href &&
                    href.includes('/ua/') &&
                    !href.includes('?') &&
                    !href.includes('#') &&
                    href.split('/').length > 4 &&
                    !href.match(/(dostavka|oplata|garantiya|kredit|o-nas|dogovir|kontakti|info|category|brand|material|color|filter|page)/) &&
                    arr.indexOf(href) === idx
                );
        });
        console.log(`üîó –ó–Ω–∞–π–¥–µ–Ω–æ ${productLinks.length} –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ç–æ–≤–∞—Ä–∏.`);
        let found = false;
        for (const link of productLinks) {
            console.log(`‚û°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: ${link}`);
            try {
                await page.goto(link, { waitUntil: 'networkidle2' });
                await new Promise(resolve => setTimeout(resolve, 1500));
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü—ñ–Ω–∏ —Ç–∞ —Ñ–æ—Ç–æ
                const isProduct = await page.evaluate(() => {
                    const priceEl = document.querySelector('.price, .product-price, [class*="price"], .current-price, .new-price, .regular-price');
                    const img = document.querySelector('img[src*="/uploads/"], img[src*="/products/"], img[src*="/product/"], img[src*="/item/"]');
                    return !!(priceEl && img);
                });
                if (isProduct) {
                    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–≤–∞—Ä: ${link}`);
                    // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ
                    const productData = await page.evaluate(() => {
                        let name = document.querySelector('h1')?.textContent?.trim() || '';
                        let price = null;
                        const priceEl = document.querySelector('.price, .product-price, [class*="price"], .current-price, .new-price, .regular-price');
                        if (priceEl) {
                            const priceText = priceEl.textContent.replace(/[^\d]/g, '');
                            if (priceText) {
                                const parsedPrice = parseInt(priceText);
                                if (parsedPrice > 0 && parsedPrice < 1000000 && !isNaN(parsedPrice)) {
                                    price = parsedPrice;
                                }
                            }
                        }
                        let salePrice = null;
                        const saleEl = document.querySelector('.sale-price, .discount-price, [class*="sale"], .old-price, .special-price, .discount');
                        if (saleEl) {
                            const saleText = saleEl.textContent.replace(/[^\d]/g, '');
                            if (saleText) {
                                const parsedSale = parseInt(saleText);
                                if (parsedSale > 0 && parsedSale < 1000000 && !isNaN(parsedSale)) {
                                    salePrice = parsedSale;
                                }
                            }
                        }
                        const photos = [];
                        const imgSelectors = [
                            '.swiper-slide img',
                            '.product-gallery img',
                            '.gallery img',
                            '.product-image img',
                            'img[src*="/uploads/"]',
                            'img[src*="/products/"]',
                            'img[src*="/product/"]',
                            'img[src*="/item/"]'
                        ];
                        imgSelectors.forEach(selector => {
                            document.querySelectorAll(selector).forEach(img => {
                                if (img.src && img.src.startsWith('http') && !photos.includes(img.src)) {
                                    photos.push(img.src);
                                }
                            });
                        });
                        let description = '';
                        const descEl = document.querySelector('.description, .product-description, [class*="description"], .details, .product-details, [class*="details"], .info, .product-info, [class*="info"]');
                        if (descEl) {
                            description = descEl.textContent.trim();
                        }
                        if (!description) {
                            const p = Array.from(document.querySelectorAll('p')).find(el => el.textContent.length > 20);
                            if (p) description = p.textContent.trim();
                        }
                        let widthCm = null, depthCm = null, heightCm = null;
                        const sizeMatch = document.body.textContent.match(/(\d+)[x—Ö](\d+)/);
                        if (sizeMatch) {
                            widthCm = parseInt(sizeMatch[1]);
                            depthCm = parseInt(sizeMatch[2]);
                        }
                        let material = '';
                        const materialKeywords = ['–¥—É–±', '—è—Å–µ–Ω', '—Å–æ—Å–Ω–∞', '–º–¥—Ñ', '–¥—Å–ø', '—à–ø–æ–Ω', '–º–∞—Å–∏–≤'];
                        const bodyText = document.body.textContent.toLowerCase();
                        for (const keyword of materialKeywords) {
                            if (bodyText.includes(keyword)) {
                                material = keyword.charAt(0).toUpperCase() + keyword.slice(1);
                                break;
                            }
                        }
                        let color = '';
                        const colorKeywords = ['–±—ñ–ª–∏–π', '—á–æ—Ä–Ω–∏–π', '–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π', '–¥—É–±', '—è—Å–µ–Ω', '—Å–æ—Å–Ω–∞', '–≤–µ–Ω–≥–µ', '–≥—Ä–∞—Ñ—ñ—Ç'];
                        for (const keyword of colorKeywords) {
                            if (bodyText.includes(keyword)) {
                                color = keyword.charAt(0).toUpperCase() + keyword.slice(1);
                                break;
                            }
                        }
                        return {
                            name,
                            price,
                            salePrice,
                            photos,
                            description,
                            widthCm,
                            depthCm,
                            heightCm,
                            material,
                            color,
                            url: window.location.href
                        };
                    });
                    const convertedProduct = {
                        type: productData.price ? 'simple' : 'mattresses',
                        name: productData.name || '–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä',
                        slug: (productData.name || 'test-product')
                            .toLowerCase()
                            .replace(/[^–∞-—èa-z0-9\s]/g, '')
                            .replace(/\s+/g, '-')
                            .substring(0, 50) + '-test',
                        brand: SITE_CONFIG.brand,
                        category: SITE_CONFIG.category,
                        subcategory: SITE_CONFIG.subcategory,
                        material: productData.material || SITE_CONFIG.material,
                        price: productData.price,
                        salePrice: productData.salePrice,
                        saleEnd: null,
                        description: productData.description ? `<p>${productData.description}</p>` : `<p>${productData.name}</p>`,
                        widthCm: productData.widthCm,
                        depthCm: productData.depthCm,
                        heightCm: productData.heightCm,
                        lengthCm: null,
                        photos: productData.photos.length > 0 ? productData.photos : [],
                        colors: productData.color ? [{
                            name: productData.color,
                            value: '#000000',
                            photo: null,
                            priceChange: 0
                        }] : [],
                        sizes: [],
                        groupProducts: [],
                        active: true,
                        visible: true,
                        filters: [],
                        popularity: 0,
                        metaDescription: '',
                        metaKeywords: '',
                        metaTitle: ''
                    };
                    const outputFile = 'exports/test-single-product.json';
                    fs.writeFileSync(outputFile, JSON.stringify([convertedProduct], null, 2));
                    console.log(`\nüíæ –¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${outputFile}`);
                    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
                    console.log(`   - –ù–∞–∑–≤–∞: ${convertedProduct.name}`);
                    console.log(`   - –¶—ñ–Ω–∞: ${convertedProduct.price || '–Ω–µ–º–∞—î'}`);
                    console.log(`   - –ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞: ${convertedProduct.salePrice || '–Ω–µ–º–∞—î'}`);
                    console.log(`   - –§–æ—Ç–æ: ${convertedProduct.photos.length} —à—Ç.`);
                    console.log(`   - –û–ø–∏—Å: ${convertedProduct.description.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
                    console.log(`   - –ú–∞—Ç–µ—Ä—ñ–∞–ª: ${convertedProduct.material}`);
                    console.log(`   - –†–æ–∑–º—ñ—Ä–∏: ${convertedProduct.widthCm}x${convertedProduct.depthCm} —Å–º`);
                    found = true;
                    break;
                }
            } catch (err) {
                // —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥—É
            }
            if (found) break;
        }
        if (!found) {
            console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ª—ñ–∂–æ–∫!');
        } else {
            console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∑–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
            console.log('üìù –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª exports/test-single-product.json —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ —Ç–æ–≤–∞—Ä—É:', error);
    } finally {
        await browser.close();
    }
}

if (require.main === module) {
    scrapeSingleProduct();
}

module.exports = { scrapeSingleProduct }; 