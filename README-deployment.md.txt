git status
git add .
git status
git commit -m "Зміни"
git log --oneline
git remote -v
git push origin main


## Детальна інструкція: Як оновити файли на GitHub та розгорнути зміни на Render після внесення змін у проєкті My-site

### Передумови
1. **Налаштування Git**: Переконайтеся, що у вас встановлено Git на вашому комп’ютері. Якщо ні, завантажте та встановіть його з офіційного сайту: [git-scm.com](https://git-scm.com/downloads).
2. **Репозиторій на GitHub**: Ваш проєкт `My-site` уже має бути ініціалізований як Git-репозиторій і підключений до віддаленого репозиторію на GitHub. Якщо це не так, я додам кроки для ініціалізації нижче.
3. **Render**: Ваш проєкт уже розгорнутий на Render і пов’язаний із вашим GitHub-репозиторієм. Render автоматично розгортає зміни, коли ви надсилаєте оновлення до репозиторію.
4. **Редактор коду**: Ви використовуєте редактор коду (наприклад, VS Code) для внесення змін.
5. **Термінал**: Ви можете використовувати командний рядок (Command Prompt, PowerShell) у Windows або термінал у VS Code.

---

### Крок 1: Перевірте статус змін у вашому проєкті
1. **Відкрийте термінал**:
   - Якщо ви використовуєте VS Code, відкрийте термінал у редакторі: `Terminal > New Terminal`.
   - Або відкрийте командний рядок (Command Prompt) у Windows: натисніть `Win + R`, введіть `cmd` і натисніть Enter.

2. **Перейдіть до папки проєкту**:
   У терміналі введіть команду, щоб перейти до папки `My-site`:
   ```bash
   cd C:\my-site
   ```

3. **Перевірте статус змін**:
   Використовуйте команду Git, щоб побачити, які файли були змінені:
   ```bash
   git status
   ```
   Ви побачите список змінених файлів, наприклад:
   ```
   Changes not staged for commit:
     (use "git add <file>..." to update what will be committed)
     (use "git restore <file>..." to discard changes in working directory)
           modified:   server.js
           modified:   public/admin.html
   ```
   Це означає, що файли `server.js` і `public/admin.html` були змінені, але ще не додані до коміту.

---

### Крок 2: Додайте змінені файли до Git
1. **Додайте змінені файли**:
   Використовуйте команду `git add`, щоб додати змінені файли до індексу Git:
   ```bash
   git add server.js public/admin.html
   ```
   Або, якщо ви хочете додати всі змінені файли в проєкті:
   ```bash
   git add .
   ```

2. **Перевірте статус ще раз**:
   Після додавання файлів виконайте:
   ```bash
   git status
   ```
   Ви побачите, що файли готові до коміту:
   ```
   Changes to be committed:
     (use "git restore --staged <file>..." to unstage)
           modified:   server.js
           modified:   public/admin.html
   ```

---

### Крок 3: Створіть коміт із описом змін
1. **Створіть коміт**:
   Використовуйте команду `git commit`, щоб зафіксувати зміни. Додайте описовий коментар, щоб у майбутньому було зрозуміло, що саме ви змінили:
   ```bash
   git commit -m "Оновлено server.js та admin.html: додано обробку медіа та прев’ю фотографій"
   ```
   - `-m` означає "message" (повідомлення), після якого ви вказуєте опис змін.
   - Наприклад, у вашому випадку я вказав, що ми оновили файли для обробки медіа та прев’ю фотографій.

2. **Перевірте, що коміт створено**:
   Ви можете переглянути історію комітів за допомогою:
   ```bash
   git log --oneline
   ```
   Ви побачите щось на кшталт:
   ```
   1a2b3c4 Оновлено server.js та admin.html: додано обробку медіа та прев’ю фотографій
   ```

---

### Крок 4: Надішліть зміни до GitHub
1. **Переконайтеся, що ваш репозиторій підключений до GitHub**:
   Перевірте, чи є віддалений репозиторій:
   ```bash
   git remote -v
   ```
   Ви маєте побачити щось на кшталт:
   ```
   origin  https://github.com/ваш-користувач/My-site.git (fetch)
   origin  https://github.com/ваш-користувач/My-site.git (push)
   ```
   Якщо віддаленого репозиторію немає, додайте його (замініть `ваш-користувач` і `My-site` на ваші дані):
   ```bash
   git remote add origin https://github.com/ваш-користувач/My-site.git
   ```

2. **Надішліть зміни до GitHub**:
   Використовуйте команду `git push`, щоб надіслати ваші коміти до віддаленого репозиторію:
   ```bash
   git push origin main
   ```
   - `origin` — це назва вашого віддаленого репозиторію (зазвичай так називається за замовчуванням).
   - `main` — це назва вашої основної гілки. Якщо у вас основна гілка називається `master` (залежить від налаштувань GitHub), використовуйте:
     ```bash
     git push origin master
     ```

3. **Авторизація (якщо потрібно)**:
   Якщо GitHub запитає авторизацію:
   - У терміналі з’явиться запит на введення імені користувача (ваш GitHub username) і пароля.
   - Замість пароля використовуйте **персональний токен доступу (Personal Access Token)**, оскільки GitHub більше не підтримує авторизацію через пароль:
     - Перейдіть на GitHub: `Settings > Developer settings > Personal access tokens > Tokens (classic)`.
     - Натисніть `Generate new token`, виберіть права доступу (наприклад, `repo`), згенеруйте токен і збережіть його.
     - Вставте цей токен у терміналі, коли Git попросить пароль.

4. **Перевірте GitHub**:
   - Відкрийте ваш репозиторій на GitHub (наприклад, `https://github.com/ваш-користувач/My-site`).
   - Переконайтеся, що файли `server.js` і `public/admin.html` оновилися, а ваш останній коміт (`Оновлено server.js та admin.html: додано обробку медіа та прев’ю фотографій`) відображається в історії.

---

### Крок 5: Розгорніть зміни на Render
Оскільки ваш проєкт на Render пов’язаний із GitHub-репозиторієм, Render автоматично розгортає зміни, коли ви надсилаєте оновлення до репозиторію. Але давайте перевіримо і, за потреби, запустимо розгортання вручну.

1. **Перейдіть до вашого проєкту на Render**:
   - Відкрийте [render.com](https://render.com) і увійдіть у свій акаунт.
   - Знайдіть ваш проєкт (наприклад, `My-site`) у списку сервісів.

2. **Перевірте автоматичне розгортання**:
   - Якщо у вас увімкнено автоматичне розгортання (за замовчуванням у Render), після надсилання змін до GitHub Render автоматично почне розгортання.
   - У панелі вашого проєкту на Render ви побачите статус розгортання, наприклад: `Deploy in progress`.

3. **Запустіть розгортання вручну (якщо потрібно)**:
   Якщо автоматичне розгортання не почалося:
   - У панелі вашого проєкту на Render натисніть кнопку `Manual Deploy`.
   - Виберіть `Deploy latest commit` (або конкретний коміт, якщо потрібно).
   - Натисніть `Deploy`.

4. **Перегляньте логи розгортання**:
   - У панелі Render відкрийте вкладку `Logs`, щоб переглянути процес розгортання.
   - Переконайтеся, що немає помилок. Наприклад, якщо `server.js` має помилки в коді, розгортання може завершитися невдало. У такому випадку:
     - Виправте помилки у вашому коді.
     - Повторіть кроки 1–4 (додайте зміни, створіть коміт, надішліть до GitHub, розгорніть на Render).

5. **Перевірте сайт**:
   - Після успішного розгортання відкрийте URL вашого сайту на Render (наприклад, `https://my-site.onrender.com`).
   - Перевірте, чи зміни в `server.js` і `public/admin.html` відображаються коректно. Наприклад, зайдіть у розділ адмінки та перевірте, чи працюють нові функції для обробки медіа та прев’ю фотографій.

---

### Крок 6: Перевірте, чи все працює, і збережіть інструкцію
1. **Перевірте функціонал**:
   - Переконайтеся, що ваш сайт працює коректно після розгортання.
   - Якщо є проблеми, перевірте логи на Render, виправте помилки в коді та повторіть кроки 1–5.

2. **Збережіть цю інструкцію**:
   - Скопіюйте цей текст у файл (наприклад, `README-deployment.md`) у вашому проєкті `My-site`, щоб мати її під рукою.
   - Або збережіть у текстовому документі на вашому комп’ютері.

---

### Додаткові поради
1. **Робота з гілками**:
   Якщо ви хочете вносити зміни без впливу на основну гілку (`main` або `master`), створіть нову гілку:
   ```bash
   git checkout -b feature/назва-вашої-зміни
   ```
   Наприклад:
   ```bash
   git checkout -b feature/add-media-handling
   ```
   Вносьте зміни, створюйте коміти, а потім надсилайте гілку до GitHub:
   ```bash
   git push origin feature/add-media-handling
   ```
   На GitHub створіть Pull Request, щоб об’єднати зміни з основною гілкою.

2. **Використовуйте `.gitignore`**:
   Переконайтеся, що у вашому проєкті є файл `.gitignore`, щоб не завантажувати зайві файли (наприклад, `node_modules`):
   ```
   node_modules/
   .env
   ```
   Якщо `.gitignore` немає, створіть його в корені проєкту (`C:\my-site\.gitignore`) і додайте ці рядки.

3. **Оновлення залежностей**:
   Якщо ви змінюєте `package.json` (наприклад, додаєте нові залежності), виконайте:
   ```bash
   npm install
   ```
   Перед комітом, щоб оновити `package-lock.json`, і додайте обидва файли до коміту:
   ```bash
   git add package.json package-lock.json
   ```

4. **Резервні копії**:
   Перед внесенням великих змін створюйте резервну копію папки `My-site`, щоб уникнути втрати даних.

---

### Приклад повного процесу для поточних змін
Ось як виглядатиме весь процес для ваших змін у `server.js` і `public/admin.html`:

1. Відкрийте термінал і перейдіть до папки проєкту:
   ```bash
   cd C:\my-site
   ```

2. Перевірте статус:
   ```bash
   git status
   ```

3. Додайте змінені файли:
   ```bash
   git add server.js public/admin.html
   ```

4. Створіть коміт:
   ```bash
   git commit -m "Оновлено server.js та admin.html: додано обробку медіа та прев’ю фотографій"
   ```

5. Надішліть зміни до GitHub:
   ```bash
   git push origin main
   ```

6. Перейдіть на Render, перевірте статус розгортання, за потреби запустіть вручну.

7. Відкрийте сайт (наприклад, `https://my-site.onrender.com`) і перевірте, чи все працює.

---

### Якщо репозиторій ще не ініціалізований
Якщо ваш проєкт `My-site` ще не є Git-репозиторієм, виконайте ці кроки:

1. **Ініціалізуйте Git**:
   ```bash
   cd C:\my-site
   git init
   ```

2. **Додайте всі файли**:
   ```bash
   git add .
   ```

3. **Створіть перший коміт**:
   ```bash
   git commit -m "Початковий коміт проєкту My-site"
   ```

4. **Створіть репозиторій на GitHub**:
   - Перейдіть на GitHub і створіть новий репозиторій (`My-site`).
   - Не додавайте `README`, `.gitignore` або ліцензію, якщо вони вже є у вашому проєкті.

5. **Підключіть локальний репозиторій до GitHub**:
   ```bash
   git remote add origin https://github.com/ваш-користувач/My-site.git
   ```

6. **Надішліть зміни**:
   ```bash
   git push -u origin main
   ```

7. **Налаштуйте Render**:
   - На Render створіть новий сервіс, виберіть ваш GitHub-репозиторій `My-site`.
   - Налаштуйте параметри (наприклад, команду для запуску: `npm install && node server.js`).
   - Увімкніть автоматичне розгортання.

---

Тепер у вас є повна інструкція, яку ви можете використовувати в майбутньому! Якщо виникнуть запитання або проблеми, звертайтеся, я допоможу. 😊