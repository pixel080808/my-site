const puppeteer = require('puppeteer');
const fs = require('fs');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É
const SITE_CONFIG = {
    category: 'vitalni',
    subcategory: 'miromark',
    brand: 'MiroMark',
    material: '–õ–∞–º—ñ–Ω–æ–≤–∞–Ω–µ –î–°–ü',
    type: 'simple'
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ URL —î —Ç–æ–≤–∞—Ä–æ–º
function isProductUrl(url) {
    // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —è–∫—ñ –ù–ï —î —Ç–æ–≤–∞—Ä–∞–º–∏
    const categoryAndInfoPages = [
        'mebli-dlya-vitalni', 'mebli-dlya-kuhni', 'dytyachi-mebli',
        'mebli-dlya-spalen', 'mebli-dlya-ofisu', 'mebli-dlya-peredpokoyu',
        'ortopedychni-matracy', 'domashnij-tekstyl', 'banketky-ta-lavky',
        'dostavka', 'oplata', 'garantiya', 'kredyt-ta-rozstrochka',
        'pro-nas', 'dogovir-publichnoyi-oferty', 'povernennya',
        'kontakty', 'about', 'contact', 'delivery', 'payment',
        'warranty', 'credit', 'return', 'terms', 'privacy'
    ];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ URL –º—ñ—Å—Ç–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    for (const category of categoryAndInfoPages) {
        if (url.includes(category)) {
            return false;
        }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ URL –º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ (—Ç–æ–≤–∞—Ä–∏ –∑–∞–∑–≤–∏—á–∞–π –º–∞—é—Ç—å –±—ñ–ª—å—à–µ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤)
    const urlParts = url.split('/').filter(part => part.length > 0);
    if (urlParts.length < 4) {
        return false;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–µ–≥–º–µ–Ω—Ç –Ω–µ —î –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    const lastSegment = urlParts[urlParts.length - 1];
    if (lastSegment.includes('mebli') || lastSegment.includes('matracy') || 
        lastSegment.includes('tekstyl') || lastSegment.includes('banketky')) {
        return false;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ URL –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    if (url.includes('page=') || url.includes('p=') || url.includes('pagination')) {
        return false;
    }
    
    return true;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ slug
function generateUniqueSlug(url, existingSlugs = new Set()) {
    const urlParts = url.split('/').filter(part => part.length > 0);
    let slug = urlParts[urlParts.length - 1];
    
    // –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –±–µ—Ä–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π
    if (!slug || slug.length === 0) {
        slug = urlParts[urlParts.length - 2] || 'product';
    }
    
    // –û—á–∏—â–∞—î–º–æ slug –≤—ñ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    slug = slug.replace(/\?.*$/, '').replace(/#.*/, '');
    
    // –Ø–∫—â–æ slug —î –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é, –≥–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
    const categorySlugs = [
        'mebli-dlya-vitalni', 'mebli-dlya-kuhni', 'dytyachi-mebli',
        'mebli-dlya-spalen', 'mebli-dlya-ofisu', 'mebli-dlya-peredpokoyu',
        'ortopedychni-matracy', 'domashnij-tekstyl', 'banketky-ta-lavky'
    ];
    
    if (categorySlugs.includes(slug)) {
        slug = `product-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
    let uniqueSlug = slug;
    let counter = 1;
    while (existingSlugs.has(uniqueSlug)) {
        uniqueSlug = `${slug}-${counter}`;
        counter++;
    }
    
    return uniqueSlug;
}

async function testSingleProductPriceFixed() {
    const browser = await puppeteer.launch({ 
        headless: true, // –®–≤–∏–¥—à–µ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        args: [
            '--no-sandbox', 
            '--disable-setuid-sandbox',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor',
            '--disable-dev-shm-usage',
            '--disable-blink-features=AutomationControlled',
            '--disable-extensions',
            '--no-first-run',
            '--disable-default-apps',
            '--disable-popup-blocking',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
            '--disable-field-trial-config',
            '--disable-ipc-flooding-protection',
            '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        ]
    });
    
    const page = await browser.newPage();
    const products = [];
    const existingSlugs = new Set();
    
    try {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ user agent
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é
        await page.evaluateOnNewDocument(() => {
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
            
            window.chrome = {
                runtime: {},
            };
            
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
            
            Object.defineProperty(navigator, 'languages', {
                get: () => ['uk-UA', 'uk', 'en-US', 'en'],
            });
        });
        
        console.log('üß™ –ü–æ—á–∏–Ω–∞—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏...');
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π URL —Ç–æ–≤–∞—Ä—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        const testProductUrl = 'https://miromark.shop/ua/lizhko-dzhennifer-miromark';
        console.log(`üîç –¢–µ—Å—Ç—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–≤–∞—Ä: ${testProductUrl}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ —Ç–æ–≤–∞—Ä
        if (!isProductUrl(testProductUrl)) {
            console.log('‚ùå URL –Ω–µ —î —Ç–æ–≤–∞—Ä–æ–º –∑–∞ –Ω–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏');
            console.log('URL —á–∞—Å—Ç–∏–Ω–∏:', testProductUrl.split('/').filter(part => part.length > 0));
            return;
        }
        
        console.log('‚úÖ URL –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —è–∫ —Ç–æ–≤–∞—Ä');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–æ–≤–∞—Ä—É
        await page.goto(testProductUrl, { waitUntil: 'networkidle2' });
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ó–±–∏—Ä–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
        const productData = await page.evaluate(() => {
            // –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
            const nameSelectors = [
                'h1', '.product-name', '.item-name', '.name',
                '[class*="name"]', '[class*="title"]', '.product-title'
            ];
            let name = '';
            for (const selector of nameSelectors) {
                const element = document.querySelector(selector);
                if (element && element.textContent.trim()) {
                    name = element.textContent.trim();
                    break;
                }
            }
            
            // –ü–û–ö–†–ê–©–ï–ù–ê –õ–û–ì–Ü–ö–ê –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –¶–Ü–ù–ò
            let price = null;
            let salePrice = null;
            
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Ü—ñ–Ω–∏ –∑ —Ç–µ–∫—Å—Ç—É
            function parsePriceFromText(text) {
                const prices = [];
                
                // –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—è–¥–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω –æ–∫—Ä–µ–º–æ
                const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
                
                for (const line of lines) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–∫–∏ –∑ –µ–∫–æ–Ω–æ–º—ñ—î—é
                    if (line.toLowerCase().includes('–µ–∫–æ–Ω–æ–º—ñ—è') || line.toLowerCase().includes('—ç–∫–æ–Ω–æ–º–∏—è')) {
                        continue;
                    }
                    
                    // –®—É–∫–∞—î–º–æ —á–∏—Å–ª–∞ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "10 308 –≥—Ä–Ω", "9 071 –≥—Ä–Ω")
                    const fullPriceMatch = line.match(/(\d{1,3}(?:\s\d{3})*)\s*–≥—Ä–Ω/);
                    if (fullPriceMatch) {
                        const price = parseInt(fullPriceMatch[1].replace(/[^\d]/g, ''));
                        if (price > 1000 && price < 100000) {
                            prices.push(price);
                        }
                    }
                    
                    // –®—É–∫–∞—î–º–æ —á–∏—Å–ª–∞ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "10308 –≥—Ä–Ω")
                    const simplePriceMatch = line.match(/(\d{4,6})\s*–≥—Ä–Ω/);
                    if (simplePriceMatch) {
                        const price = parseInt(simplePriceMatch[1]);
                        if (price > 1000 && price < 100000) {
                            prices.push(price);
                        }
                    }
                    
                    // –®—É–∫–∞—î–º–æ –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫—ñ —á–∏—Å–ª–∞ (–º–æ–∂–ª–∏–≤–æ –±–µ–∑ "–≥—Ä–Ω")
                    const numMatch = line.match(/(\d{4,6})/);
                    if (numMatch) {
                        const num = parseInt(numMatch[1]);
                        if (num > 1000 && num < 100000 && num > 2000) {
                            prices.push(num);
                        }
                    }
                }
                
                return prices;
            }
            
            // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç–µ–∫—Å—Ç–∏ –∑ —Ü—ñ–Ω–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            const allPriceTexts = [];
            
            // –®—É–∫–∞—î–º–æ —Ü—ñ–Ω—É –≤ —Ä—ñ–∑–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            const priceSelectors = [
                '.price', '.product-price', '[class*="price"]',
                '.current-price', '.new-price', '.regular-price',
                '.product-cost', '[class*="cost"]', '.price-value',
                '.product-price-value', '.price-new', '.price-current',
                '.product__price', '.product__price--new', '.product__price--old',
                '.product__price--current', '.product__price--discount', '.product__price--main',
                '.product__price--sale', '.product__price--regular', '.product__price--special',
                '.product__price--final', '.product__price--actual', '.product__price--real',
                '.product__price--now', '.product-old-price', '.product-new-price',
                '.product-price-value', '.product-price-amount', '.product-price-final',
                '.product-price-current', '.product-price-main', '.product-price-discount',
                '.product-price-sale', '.product-price-regular', '.product-price-special',
                '.product-price-final', '.product-price-actual', '.product-price-real',
                '.product-price-now', '.price-block', '.price-box', '.price-wrapper',
                '.price__value', '.price__main', '.price__current', '.price__discount',
                '.price__sale', '.price__regular', '.price__special', '.price__final',
                '.price__actual', '.price__real', '.price__now', '.price-amount',
                '.price-final', '.price-current', '.price-main', '.price-discount',
                '.price-sale', '.price-regular', '.price-special', '.price-final',
                '.price-actual', '.price-real', '.price-now', '.product-price__value',
                '.product-price__main', '.product-price__current', '.product-price__discount',
                '.product-price__sale', '.product-price__regular', '.product-price__special',
                '.product-price__final', '.product-price__actual', '.product-price__real',
                '.product-price__now', '.product__main-price', '.product__discount-price',
                '.product__sale-price', '.product__regular-price', '.product__special-price',
                '.product__final-price', '.product__actual-price', '.product__real-price',
                '.product__now-price', '.product__price-amount', '.product__price-final',
                '.product__price-current', '.product__price-main', '.product__price-discount',
                '.product__price-sale', '.product__price-regular', '.product__price-special',
                '.product__price-final', '.product__price-actual', '.product__price-real',
                '.product__price-now', '.product__price-block', '.product__price-box',
                '.product__price-wrapper', '.product__price__value', '.product__price__main',
                '.product__price__current', '.product__price__discount', '.product__price__sale',
                '.product__price__regular', '.product__price__special', '.product__price__final',
                '.product__price__actual', '.product__price__real', '.product__price__now'
            ];
            
            for (const selector of priceSelectors) {
                const priceEl = document.querySelector(selector);
                if (priceEl) {
                    const priceText = priceEl.textContent.trim();
                    if (priceText && priceText.includes('–≥—Ä–Ω')) {
                        allPriceTexts.push({
                            selector: selector,
                            text: priceText
                        });
                    }
                }
            }
            
            // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ü—ñ–Ω–∏
            const allFoundPrices = [];
            for (const priceInfo of allPriceTexts) {
                const parsedPrices = parsePriceFromText(priceInfo.text);
                parsedPrices.forEach(price => {
                    allFoundPrices.push({
                        price: price,
                        text: priceInfo.text,
                        selector: priceInfo.selector
                    });
                });
            }
            
            // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ
            const uniquePrices = [];
            const seenPrices = new Set();
            allFoundPrices.forEach(item => {
                if (!seenPrices.has(item.price)) {
                    seenPrices.add(item.price);
                    uniquePrices.push(item);
                }
            });
            
            // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ü—ñ–Ω–æ—é (–≤—ñ–¥ –Ω–∞–π–º–µ–Ω—à–æ—ó –¥–æ –Ω–∞–π–±—ñ–ª—å—à–æ—ó)
            uniquePrices.sort((a, b) => a.price - b.price);
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞ –∞–∫—Ü—ñ–π–Ω—É —Ü—ñ–Ω–∏
            if (uniquePrices.length > 0) {
                // –ù–∞–π–±—ñ–ª—å—à–∞ —Ü—ñ–Ω–∞ - –æ—Å–Ω–æ–≤–Ω–∞
                price = uniquePrices[uniquePrices.length - 1].price;
                
                // –Ø–∫—â–æ —î –¥–≤—ñ –∞–±–æ –±—ñ–ª—å—à–µ —Ü—ñ–Ω, —Ç–æ –Ω–∞–π–º–µ–Ω—à–∞ - –∞–∫—Ü—ñ–π–Ω–∞
                if (uniquePrices.length >= 2) {
                    salePrice = uniquePrices[0].price;
                } else {
                    salePrice = null;
                }
            }
            
            // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ü—ñ–Ω—É –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö, —à—É–∫–∞—î–º–æ –ø–æ –≤—Å—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            if (!price) {
                const allText = document.body.innerText;
                const priceMatches = allText.match(/(\d{1,3}(?:\s\d{3})*)\s*–≥—Ä–Ω/g);
                if (priceMatches && priceMatches.length > 0) {
                    for (const match of priceMatches) {
                        const num = parseInt(match.replace(/[^\d]/g, ''));
                        if (num > 1000 && num < 100000) {
                            if (!price || num > price) {
                                price = num;
                            }
                        }
                    }
                }
            }
            
            // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ü—ñ–Ω—É –≤–∑–∞–≥–∞–ª—ñ
            if (!price) {
                price = 1;
            }
            
            // –í—Å—ñ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É - –ø–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞
            const allPhotos = [];
            
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL —Ñ–æ—Ç–æ (–±–µ–∑ —Ä–æ–∑–º—ñ—Ä—ñ–≤)
            function getBaseImageUrl(url) {
                // –í–∏–¥–∞–ª—è—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –∑ URL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: _672x672, _100x100, _228x228)
                return url.replace(/-\d+x\d+\.(jpg|jpeg|png|gif)$/, '.$1');
            }
            
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —Ü–µ –æ—Å–Ω–æ–≤–Ω–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É
            function isMainProductImage(url) {
                // –í–∏–∫–ª—é—á–∞—î–º–æ –ª–æ–≥–æ—Ç–∏–ø–∏, –±–∞–Ω–Ω–µ—Ä–∏, —ñ–∫–æ–Ω–∫–∏
                if (url.includes('logo') || url.includes('banner') || url.includes('icon')) {
                    return false;
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É (–∑–∞–∑–≤–∏—á–∞–π –º—ñ—Å—Ç—è—Ç—å ID —Ç–æ–≤–∞—Ä—É)
                if (url.includes('/goods/') || url.includes('/products/') || url.includes('/catalog/')) {
                    return true;
                }
                
                return false;
            }
            
            // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —Ñ–æ—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π –≥–∞–ª–µ—Ä–µ—ó —Ç–æ–≤–∞—Ä—É
            const mainGallerySelectors = [
                '.product-gallery img', '.gallery img', '.product-images img',
                '.image-gallery img', '.swiper-slide img', '.product-photo img',
                '.main-image img', '.product-image img'
            ];
            
            const allImageUrls = new Set();
            
            for (const selector of mainGallerySelectors) {
                const images = document.querySelectorAll(selector);
                images.forEach(img => {
                    if (img.src && img.src.startsWith('http') && isMainProductImage(img.src)) {
                        allImageUrls.add(img.src);
                    }
                });
            }
            
            // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ—ó, —à—É–∫–∞—î–º–æ –≤ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ü—è—Ö
            if (allImageUrls.size === 0) {
                const photoSelectors = [
                    'img[src*="miromark"]', 'img[src*="/uploads/"]', 'img[src*="/products/"]',
                    'img[src*="/product/"]', 'img[src*="/item/"]'
                ];
                
                for (const selector of photoSelectors) {
                    const images = document.querySelectorAll(selector);
                    images.forEach(img => {
                        if (img.src && img.src.startsWith('http') && isMainProductImage(img.src)) {
                            allImageUrls.add(img.src);
                        }
                    });
                }
            }
            
            // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ñ–æ—Ç–æ, —à—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (allImageUrls.size === 0) {
                const allImages = document.querySelectorAll('img[src*="http"]');
                allImages.forEach(img => {
                    if (img.src && 
                        !img.src.includes('logo') && 
                        !img.src.includes('banner') &&
                        !img.src.includes('icon') &&
                        isMainProductImage(img.src)) {
                        allImageUrls.add(img.src);
                    }
                });
            }
            
            // –í–∏–±–µ—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ URL)
            const uniquePhotos = [];
            const usedBaseUrls = new Set();
            
            for (const url of allImageUrls) {
                const baseUrl = getBaseImageUrl(url);
                if (!usedBaseUrls.has(baseUrl)) {
                    // –í–∏–±–µ—Ä–∞—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ç–æ
                    const sameBasePhotos = Array.from(allImageUrls).filter(u => getBaseImageUrl(u) === baseUrl);
                    const largestPhoto = sameBasePhotos.reduce((largest, current) => {
                        const largestSize = largest.match(/(\d+)x(\d+)/);
                        const currentSize = current.match(/(\d+)x(\d+)/);
                        
                        if (!largestSize) return current;
                        if (!currentSize) return largest;
                        
                        const largestArea = parseInt(largestSize[1]) * parseInt(largestSize[2]);
                        const currentArea = parseInt(currentSize[1]) * parseInt(currentSize[2]);
                        
                        return currentArea > largestArea ? current : largest;
                    });
                    
                    uniquePhotos.push(largestPhoto);
                    usedBaseUrls.add(baseUrl);
                }
            }
            
            // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ –¥–æ 3 (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
            const finalPhotos = uniquePhotos.slice(0, 3);
            
            // –†–æ–∑–º—ñ—Ä–∏
            let widthCm = null, depthCm = null, heightCm = null;
            const sizeText = document.body.textContent;
            const sizeMatches = sizeText.match(/(\d+)\s*[x—Ö]\s*(\d+)/g);
            if (sizeMatches && sizeMatches.length > 0) {
                const firstSize = sizeMatches[0].match(/(\d+)\s*[x—Ö]\s*(\d+)/);
                if (firstSize) {
                    widthCm = parseInt(firstSize[1]);
                    depthCm = parseInt(firstSize[2]);
                }
            }
            
            return {
                name,
                price,
                salePrice,
                photos: finalPhotos,
                description: `<p>${name}</p>`, // –ü—Ä–æ—Å—Ç–∏–π –æ–ø–∏—Å
                material: '',
                // widthCm, depthCm, heightCm, lengthCm –≤–∏–¥–∞–ª–µ–Ω–æ
                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –¥–µ–±–∞–≥—É
                debugInfo: {
                    allPriceTexts: allPriceTexts,
                    allFoundPrices: allFoundPrices,
                    uniquePrices: uniquePrices,
                    allText: document.body.innerText.substring(0, 1000) // –ü–µ—Ä—à—ñ 1000 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
                }
            };
        });
        
        console.log('üìä –î–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É:');
        console.log('   –ù–∞–∑–≤–∞:', productData.name);
        console.log('   –û—Å–Ω–æ–≤–Ω–∞ —Ü—ñ–Ω–∞:', productData.price);
        console.log('   –ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞:', productData.salePrice);
        console.log('   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ:', productData.photos.length);
        console.log('   –†–æ–∑–º—ñ—Ä–∏:', `${productData.widthCm}x${productData.depthCm}x${productData.heightCm}`);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—ñ–Ω–∏
        console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü—ñ–Ω–∏:');
        console.log('–ó–Ω–∞–π–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ —Ü—ñ–Ω–∞–º–∏:');
        productData.debugInfo.allPriceTexts.forEach((item, index) => {
            console.log(`  ${index + 1}. ${item.selector}: "${item.text}"`);
        });
        
        console.log('\n–ü–∞—Ä—Å–æ–≤–∞–Ω—ñ —Ü—ñ–Ω–∏:');
        productData.debugInfo.allFoundPrices.forEach((item, index) => {
            console.log(`  ${index + 1}. ${item.price} –≥—Ä–Ω (–∑ "${item.text}")`);
        });
        
        console.log('\n–ü–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–µ–∫—Å—Ç—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏:');
        console.log(productData.debugInfo.allText.substring(0, 500));
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç–æ–≤–∞—Ä—É
        const productType = 'simple';
        
        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ
        if (productData.name && productData.name.length > 0) {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π slug
            const slug = generateUniqueSlug(testProductUrl, existingSlugs);
            existingSlugs.add(slug);
            
            console.log('üîó –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π slug:', slug);

            const convertedProduct = {
                type: productType,
                name: productData.name,
                slug: slug,
                brand: SITE_CONFIG.brand,
                category: SITE_CONFIG.category,
                subcategory: SITE_CONFIG.subcategory,
                material: productData.material || SITE_CONFIG.material,
                price: productData.price,
                salePrice: productData.salePrice,
                saleEnd: null,
                description: productData.description,
                // widthCm, depthCm, heightCm, lengthCm –≤–∏–¥–∞–ª–µ–Ω–æ
                photos: productData.photos,
                colors: [],
                sizes: [],
                groupProducts: [],
                active: true,
                visible: true,
                filters: [],
                popularity: 0,
                metaDescription: '',
                metaKeywords: '',
                metaTitle: ''
            };
            
            products.push(convertedProduct);
            console.log(`‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${productData.name} (${productType})`);
        } else {
            console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É');
        }
        
        console.log(`\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó—ñ–±—Ä–∞–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤`);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const outputPath = 'exports/test-single-product-price-fixed.json';
        fs.writeFileSync(outputPath, JSON.stringify(products, null, 2));
        
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: ${outputPath}`);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
        if (products.length > 0) {
            const product = products[0];
            console.log(`\nÔøΩÔøΩ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä:`);
            console.log(`   –¢–∏–ø: ${product.type}`);
            console.log(`   –ù–∞–∑–≤–∞: ${product.name}`);
            console.log(`   Slug: ${product.slug}`);
            console.log(`   –ë—Ä–µ–Ω–¥: ${product.brand}`);
            console.log(`   –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${product.category}`);
            console.log(`   –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: ${product.subcategory}`);
            console.log(`   –ú–∞—Ç–µ—Ä—ñ–∞–ª: ${product.material}`);
            console.log(`   –û—Å–Ω–æ–≤–Ω–∞ —Ü—ñ–Ω–∞: ${product.price}`);
            console.log(`   –ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞: ${product.salePrice}`);
            console.log(`   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ: ${product.photos.length}`);
            console.log(`   –†–æ–∑–º—ñ—Ä–∏: ${product.widthCm}x${product.depthCm}x${product.heightCm}`);
            console.log(`   –ê–∫—Ç–∏–≤–Ω–∏–π: ${product.active}`);
            console.log(`   –í–∏–¥–∏–º–∏–π: ${product.visible}`);
        }
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ç–µ—Å—Ç—É:', error);
    } finally {
        await browser.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testSingleProductPriceFixed().catch(console.error); 