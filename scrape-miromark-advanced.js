const puppeteer = require('puppeteer');
const fs = require('fs');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É
const SITE_CONFIG = {
    category: 'vitalni',
    subcategory: 'miromark',
    brand: 'MiroMark',
    material: '–õ–∞–º—ñ–Ω–æ–≤–∞–Ω–µ –î–°–ü',
    type: 'simple'
};

async function scrapeMiroMarkAdvanced() {
    const browser = await puppeteer.launch({ 
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    const products = [];
    
    try {
        console.log('üîç –ü–æ—á–∏–Ω–∞—é –∑–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ –∑ MiroMark (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)...');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        await page.goto('https://miromark.shop/ua', { waitUntil: 'networkidle2' });
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä–∏
        const productUrls = await page.evaluate(() => {
            const links = Array.from(document.querySelectorAll('a[href*="/ua/"]'));
            return links
                .map(link => link.href)
                .filter(href => href.includes('/ua/') && !href.includes('#') && !href.includes('mailto'))
                .filter((href, index, arr) => arr.indexOf(href) === index);
        });
        
        console.log(`üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ ${productUrls.length} –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏`);
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        for (let i = 0; i < productUrls.length; i++) {
            const productUrl = productUrls[i];
            console.log(`\nüì¶ –û–±—Ä–æ–±–ª—è—é —Ç–æ–≤–∞—Ä ${i + 1}/${productUrls.length}: ${productUrl}`);
            
            try {
                await page.goto(productUrl, { waitUntil: 'networkidle2' });
                
                // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
                const productData = await page.evaluate(() => {
                    // –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
                    const nameSelectors = [
                        'h1',
                        '.product-title',
                        '.item-title',
                        '[class*="title"]',
                        '[class*="name"]'
                    ];
                    let name = '';
                    for (const selector of nameSelectors) {
                        const element = document.querySelector(selector);
                        if (element && element.textContent.trim()) {
                            name = element.textContent.trim();
                            break;
                        }
                    }
                    
                    // –¶—ñ–Ω–∞
                    const priceSelectors = [
                        '.price',
                        '.product-price',
                        '[class*="price"]',
                        '.current-price'
                    ];
                    let price = null;
                    for (const selector of priceSelectors) {
                        const element = document.querySelector(selector);
                        if (element) {
                            const priceText = element.textContent.replace(/[^\d]/g, '');
                            if (priceText) {
                                price = parseInt(priceText);
                                break;
                            }
                        }
                    }
                    
                    // –ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞
                    const salePriceSelectors = [
                        '.sale-price',
                        '.discount-price',
                        '[class*="sale"]',
                        '.old-price'
                    ];
                    let salePrice = null;
                    for (const selector of salePriceSelectors) {
                        const element = document.querySelector(selector);
                        if (element) {
                            const saleText = element.textContent.replace(/[^\d]/g, '');
                            if (saleText) {
                                salePrice = parseInt(saleText);
                                break;
                            }
                        }
                    }
                    
                    // –§–æ—Ç–æ
                    const imageSelectors = [
                        '.product-image img',
                        '.item-image img',
                        '[class*="image"] img',
                        '.gallery img',
                        'img[src*="product"]'
                    ];
                    let photo = null;
                    for (const selector of imageSelectors) {
                        const element = document.querySelector(selector);
                        if (element && element.src) {
                            photo = element.src;
                            break;
                        }
                    }
                    
                    // –û–ø–∏—Å
                    const descriptionSelectors = [
                        '.description',
                        '.product-description',
                        '[class*="desc"]',
                        '.item-description'
                    ];
                    let description = '';
                    for (const selector of descriptionSelectors) {
                        const element = document.querySelector(selector);
                        if (element && element.textContent.trim()) {
                            description = element.textContent.trim();
                            break;
                        }
                    }
                    
                    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    const specsSelectors = [
                        '.specifications',
                        '.characteristics',
                        '[class*="spec"]',
                        '.product-info'
                    ];
                    let specifications = '';
                    for (const selector of specsSelectors) {
                        const element = document.querySelector(selector);
                        if (element && element.textContent.trim()) {
                            specifications = element.textContent.trim();
                            break;
                        }
                    }
                    
                    // –†–æ–∑–º—ñ—Ä–∏
                    const sizeMatch = (name + ' ' + specifications).match(/(\d+)[x—Ö](\d+)/);
                    let size = '';
                    if (sizeMatch) {
                        size = `${sizeMatch[1]}x${sizeMatch[2]}`;
                    }
                    
                    // –ú–∞—Ç–µ—Ä—ñ–∞–ª
                    const materialMatch = (name + ' ' + specifications).match(/(–¥—É–±|—è—Å–µ–Ω|—Å–æ—Å–Ω–∞|–º–¥—Ñ|–¥—Å–ø)/i);
                    let material = '';
                    if (materialMatch) {
                        material = materialMatch[1];
                    }
                    
                    // –ö–æ–ª—ñ—Ä
                    const colorMatch = (name + ' ' + specifications).match(/(–±—ñ–ª–∏–π|—á–æ—Ä–Ω–∏–π|–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π|–¥—É–±|—è—Å–µ–Ω|—Å–æ—Å–Ω–∞|–≤–µ–Ω–≥–µ)/i);
                    let color = '';
                    if (colorMatch) {
                        color = colorMatch[1];
                    }
                    
                    return {
                        name,
                        price,
                        salePrice,
                        photo,
                        description,
                        specifications,
                        size,
                        material,
                        color,
                        url: window.location.href
                    };
                });
                
                if (productData.name && productData.name.length > 0) {
                    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä: ${productData.name}`);
                    products.push(productData);
                }
                
                // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                await page.waitForTimeout(500);
                
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ ${productUrl}:`, error.message);
            }
        }
        
        console.log(`\nüéâ –ó–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤`);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É
        const convertedProducts = products.map((product, index) => {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π slug
            const slug = product.name
                .toLowerCase()
                .replace(/[^–∞-—èa-z0-9\s]/g, '')
                .replace(/\s+/g, '-')
                .substring(0, 50) + '-' + (index + 1);
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª
            let material = SITE_CONFIG.material;
            if (product.material) {
                material = product.material.charAt(0).toUpperCase() + product.material.slice(1);
            } else if (product.name.toLowerCase().includes('–¥—É–±')) material = '–î—É–±';
            else if (product.name.toLowerCase().includes('—è—Å–µ–Ω')) material = '–Ø—Å–µ–Ω';
            else if (product.name.toLowerCase().includes('—Å–æ—Å–Ω–∞')) material = '–°–æ—Å–Ω–∞';
            else if (product.name.toLowerCase().includes('–º–¥—Ñ')) material = '–ú–î–§';
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
            let widthCm = null, depthCm = null, heightCm = null;
            if (product.size) {
                const sizeMatch = product.size.match(/(\d+)[x—Ö](\d+)/);
                if (sizeMatch) {
                    widthCm = parseInt(sizeMatch[1]);
                    depthCm = parseInt(sizeMatch[2]);
                }
            }
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª—å–æ—Ä–∏
            const colors = [];
            if (product.color) {
                colors.push({
                    name: product.color.charAt(0).toUpperCase() + product.color.slice(1),
                    value: '#000000',
                    photo: null,
                    priceChange: 0
                });
            }
            
            // –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å
            let description = '<p><br></p>';
            if (product.description) {
                description = `<p>${product.description}</p>`;
            }
            if (product.specifications) {
                description += `<p><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></p><p>${product.specifications}</p>`;
            }
            
            return {
                name: product.name,
                category: SITE_CONFIG.category,
                subcategory: SITE_CONFIG.subcategory,
                price: product.price,
                salePrice: product.salePrice,
                saleEnd: null,
                brand: SITE_CONFIG.brand,
                material: material,
                filters: [],
                photos: product.photo ? [product.photo] : [],
                visible: true,
                active: true,
                slug: slug,
                type: SITE_CONFIG.type,
                sizes: [],
                colors: colors,
                groupProducts: [],
                description: description,
                widthCm: widthCm,
                depthCm: depthCm,
                heightCm: heightCm,
                lengthCm: null,
                popularity: 0,
                metaDescription: '',
                metaKeywords: '',
                metaTitle: ''
            };
        });
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const outputFile = 'miromark-products-advanced.json';
        fs.writeFileSync(outputFile, JSON.stringify(convertedProducts, null, 2));
        
        console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${outputFile}`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${convertedProducts.length}`);
        console.log(`   - –ó —Ü—ñ–Ω–∞–º–∏: ${convertedProducts.filter(p => p.price).length}`);
        console.log(`   - –ó –∞–∫—Ü—ñ–π–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏: ${convertedProducts.filter(p => p.salePrice).length}`);
        console.log(`   - –ó —Ñ–æ—Ç–æ: ${convertedProducts.filter(p => p.photos.length > 0).length}`);
        console.log(`   - –ó –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏: ${convertedProducts.filter(p => p.material !== SITE_CONFIG.material).length}`);
        
        return convertedProducts;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ –¥–∞–Ω–∏—Ö:', error);
        throw error;
    } finally {
        await browser.close();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    scrapeMiroMarkAdvanced()
        .then(products => {
            console.log('\n‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
            console.log('üìù –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª miromark-products-advanced.json —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω–∫—É');
        })
        .catch(error => {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { scrapeMiroMarkAdvanced }; 